"use server";

import { prefillClient } from "@/lib/api/demarches-simplifiees/rest";
import type {
  PrefillData,
  CreateDossierResponse,
} from "@/lib/api/demarches-simplifiees/rest/types";
import type { ActionResult } from "../types";
import { Step } from "@/lib/parcours/parcours.types";
import { DS_FIELDS } from "@/lib/constants/dsFields.constants";
import { RGAFormData } from "@/lib/form-rga";
import { getMappingStats } from "@/lib/services/rga-to-ds.mapper";
import { getServerEnv } from "@/lib/config/env.config";
import { getDemarchesSimplifieesClient } from "@/lib/api/demarches-simplifiees/graphql";

/**
 * Cr√©e un dossier pr√©rempli dans D√©marches Simplifi√©es
 *
 * Action principale utilis√©e par le parcours d'√©ligibilit√©
 * pour cr√©er un vrai dossier avec les donn√©es du simulateur RGA
 *
 * @param data - Les donn√©es transform√©es depuis RGA vers le format DS
 */
export async function createPrefillDossier(
  data: PrefillData,
  step: Step,
  rgaDataOriginal?: Partial<RGAFormData> // Param√®tre optionnel pour debug
): Promise<ActionResult<CreateDossierResponse>> {
  try {
    // Si on a les donn√©es RGA originales, logger la comparaison
    if (rgaDataOriginal) {
      const env = getServerEnv();
      const demarcheId = parseInt(env.DEMARCHES_SIMPLIFIEES_ID_ELIGIBILITE);
      const client = getDemarchesSimplifieesClient();
      const schema = await client.getDemarcheSchema(demarcheId);
      console.log("schema de la d√©marche :>> ", JSON.stringify(schema));
      const addressField = schema?.activeRevision?.champDescriptors.find((c) =>
        c.label.toLowerCase().includes("adresse")
      );
      console.log("Format attendu pour l'adresse:", addressField);

      console.log("üìä Analyse du mapping RGA ‚Üí DS:");
      const stats = getMappingStats(rgaDataOriginal);
      console.log(`  - Champs mappables totaux: ${stats.total}`);
      console.log(
        `  - Champs effectivement mapp√©s: ${stats.filled} (${stats.percentage}%)`
      );
      console.log(`  - Par section:`, stats.bySection);

      // Logger les donn√©es RGA qui auraient d√ª √™tre mapp√©es
      console.log("üîç Donn√©es RGA source:");
      console.log(JSON.stringify(rgaDataOriginal, null, 2));
    }

    // Logging des champs mapp√©s
    console.log("üì§ Envoi vers DS - √âtape:", step);
    console.log("üìù Nombre de champs pr√©remplis:", Object.keys(data).length);

    // Afficher chaque champ avec sa valeur
    console.log("üìã D√©tail des champs mapp√©s:");
    Object.entries(data).forEach(([key, value]) => {
      const fieldId = key.replace("champ_", "");
      const fieldInfo = DS_FIELDS[fieldId];
      const label = fieldInfo?.label || "Champ inconnu";
      console.log(`  - ${label} (${key}): ${JSON.stringify(value)}`);
    });

    // Validation des donn√©es
    const errors = prefillClient.validatePrefillData(data);

    if (errors.length > 0) {
      console.warn("Avertissements de validation DS:", errors);
      // On ne bloque pas si ce sont juste des avertissements
      // Les champs requis sont d√©j√† valid√©s c√¥t√© RGA
    }

    // Cr√©ation du dossier
    const result = await prefillClient.createPrefillDossier(data, step);

    console.log("‚úÖ Dossier DS cr√©√© avec succ√®s:", {
      numero: result.dossier_number,
      url: result.dossier_url,
      champsEnvoyes: Object.keys(data).length,
      detailChamps: Object.keys(data),
    });

    console.log("Dossier DS cr√©√©:", {
      numero: result.dossier_number,
      url: result.dossier_url,
    });

    return {
      success: true,
      data: result,
    };
  } catch (error) {
    console.error("Erreur cr√©ation dossier DS:", error);

    // Gestion d'erreurs sp√©cifiques de l'API DS
    if (error instanceof Error) {
      if (
        error.message.includes("401") ||
        error.message.includes("Unauthorized")
      ) {
        return {
          success: false,
          error:
            "Erreur d'authentification avec D√©marches Simplifi√©es. Veuillez contacter le support.",
        };
      }

      if (error.message.includes("404")) {
        return {
          success: false,
          error: "D√©marche introuvable. Veuillez contacter le support.",
        };
      }

      if (
        error.message.includes("422") ||
        error.message.includes("validation")
      ) {
        return {
          success: false,
          error:
            "Les donn√©es envoy√©es ne sont pas valides. Veuillez v√©rifier votre simulation.",
        };
      }

      if (error.message.includes("500") || error.message.includes("503")) {
        return {
          success: false,
          error:
            "D√©marches Simplifi√©es est temporairement indisponible. Veuillez r√©essayer dans quelques minutes.",
        };
      }
    }

    return {
      success: false,
      error:
        "Erreur lors de la cr√©ation du dossier. Veuillez r√©essayer ou contacter le support.",
    };
  }
}

/**
 * Valide les donn√©es avant envoi (optionnel)
 *
 * Peut √™tre utilis√© pour v√©rifier les donn√©es avant l'envoi r√©el
 * Utile pour du debug ou des v√©rifications pr√©alables
 *
 * @param data - Les donn√©es √† valider
 */
export async function validatePrefillData(
  data: PrefillData
): Promise<ActionResult<{ valid: boolean; warnings: string[] }>> {
  try {
    const warnings = prefillClient.validatePrefillData(data);

    return {
      success: true,
      data: {
        valid: warnings.length === 0,
        warnings,
      },
    };
  } catch (error) {
    console.error("Erreur lors de la validation:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Erreur de validation",
    };
  }
}
