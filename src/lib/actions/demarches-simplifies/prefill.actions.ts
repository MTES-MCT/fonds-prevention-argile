"use server";

import { prefillClient } from "@/lib/api/demarches-simplifiees/rest";
import type {
  PrefillData,
  CreateDossierResponse,
  DemarcheSchema,
  DemarcheStats,
} from "@/lib/api/demarches-simplifiees/rest/types";
import type { ActionResult } from "./types";

// Import des donn√©es de mock
import mockDataRGA from "@/lib/mocks/prefill-data-reponses-ds.json";

// Type pour nos datasets de mock
type MockDataSet = "test" | "production" | "minimal";

/**
 * R√©cup√®re le sch√©ma de la d√©marche
 */
export async function getDemarcheSchema(): Promise<
  ActionResult<DemarcheSchema>
> {
  try {
    const schema = await prefillClient.getSchema();
    return {
      success: true,
      data: schema,
    };
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration du sch√©ma:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Erreur inconnue",
    };
  }
}

/**
 * R√©cup√®re les statistiques de la d√©marche
 */
export async function getDemarcheStats(): Promise<ActionResult<DemarcheStats>> {
  try {
    const stats = await prefillClient.getStats();
    return {
      success: true,
      data: stats,
    };
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des stats:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Erreur inconnue",
    };
  }
}

/**
 * Nettoie les donn√©es de mock en enlevant les commentaires
 */
function cleanMockData(data: Record<string, unknown>): PrefillData {
  const cleaned: PrefillData = {};

  for (const [key, value] of Object.entries(data)) {
    // Ignore les cl√©s qui sont des commentaires (commencent par //)
    if (!key.startsWith("//") && value !== "") {
      cleaned[key] = value as string | number | boolean | null;
    }
  }

  return cleaned;
}

/**
 * R√©cup√®re les donn√©es de mock selon le dataset sp√©cifi√©
 */
function getMockData(dataset: MockDataSet = "test"): PrefillData {
  const mockSet = mockDataRGA[dataset];

  if (!mockSet) {
    console.warn(
      `Dataset "${dataset}" non trouv√©, utilisation du dataset "test"`
    );
    return cleanMockData(mockDataRGA.test.data);
  }

  return cleanMockData(mockSet.data);
}

/**
 * Cr√©e un dossier pr√©rempli avec des donn√©es de test
 * @param dataset - Le jeu de donn√©es √† utiliser ("test", "production", "minimal")
 */
export async function createTestDossier(
  dataset: MockDataSet = "test"
): Promise<ActionResult<CreateDossierResponse>> {
  try {
    // R√©cup√©ration des donn√©es de mock
    const testData = getMockData(dataset);

    console.log(`üìã Utilisation du dataset "${dataset}"`);
    console.log(
      `üìä Nombre de champs √† pr√©remplir: ${Object.keys(testData).length}`
    );

    // Validation basique des donn√©es
    const errors = prefillClient.validatePrefillData(testData);
    if (errors.length > 0) {
      console.warn("‚ö†Ô∏è Avertissements de validation:", errors);
      // On continue quand m√™me, car certains champs peuvent √™tre optionnels
    }

    // Cr√©ation du dossier
    const result = await prefillClient.createPrefillDossier(testData);

    console.log("‚úÖ Dossier test cr√©√© avec succ√®s:", {
      dataset: dataset,
      numero: result.dossier_number,
      id: result.dossier_id,
      url: result.dossier_url,
    });

    return {
      success: true,
      data: result,
    };
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation du dossier test:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Erreur inconnue",
    };
  }
}

/**
 * Cr√©e un dossier pr√©rempli avec des donn√©es personnalis√©es
 */
export async function createPrefillDossier(
  data: PrefillData
): Promise<ActionResult<CreateDossierResponse>> {
  try {
    // Validation basique des donn√©es
    const errors = prefillClient.validatePrefillData(data);
    if (errors.length > 0) {
      return {
        success: false,
        error: `Erreurs de validation: ${errors.join(", ")}`,
      };
    }

    const result = await prefillClient.createPrefillDossier(data);

    console.log("‚úÖ Dossier cr√©√© avec succ√®s:", result.dossier_number);

    return {
      success: true,
      data: result,
    };
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation du dossier:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Erreur inconnue",
    };
  }
}

/**
 * G√©n√®re une URL de pr√©remplissage (m√©thode GET)
 * Attention: limit√©e √† ~2000 caract√®res
 */
export async function generatePrefillUrl(
  dataset: MockDataSet = "minimal"
): Promise<ActionResult<string>> {
  try {
    // On utilise le dataset minimal par d√©faut pour √©viter une URL trop longue
    const prefillData = getMockData(dataset);

    const url = prefillClient.generatePrefillUrl(prefillData);

    if (url.length > 2000) {
      console.warn(
        `‚ö†Ô∏è URL tr√®s longue (${url.length} caract√®res) - risque de ne pas fonctionner`
      );
    }

    console.log(
      `üîó URL g√©n√©r√©e pour le dataset "${dataset}": ${url.length} caract√®res`
    );

    return {
      success: true,
      data: url,
    };
  } catch (error) {
    console.error("‚ùå Erreur lors de la g√©n√©ration de l'URL:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Erreur inconnue",
    };
  }
}

/**
 * Valide les donn√©es avant pr√©remplissage
 */
export async function validatePrefillData(
  data: PrefillData
): Promise<ActionResult<string[]>> {
  try {
    // R√©cup√®re le sch√©ma pour validation
    const schemaResult = await getDemarcheSchema();

    if (!schemaResult.success) {
      return {
        success: false,
        error: "Impossible de r√©cup√©rer le sch√©ma pour validation",
      };
    }

    const errors = prefillClient.validatePrefillData(data, schemaResult.data);

    if (errors.length > 0) {
      return {
        success: false,
        error: errors.join(", "),
      };
    }

    return {
      success: true,
      data: [],
    };
  } catch (error) {
    console.error("‚ùå Erreur lors de la validation:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Erreur inconnue",
    };
  }
}

/**
 * Liste les datasets disponibles avec leurs descriptions
 */
export async function listAvailableDatasets(): Promise<
  ActionResult<{ name: string; description: string }[]>
> {
  try {
    const datasets = Object.entries(mockDataRGA).map(([name, data]) => ({
      name,
      description: data.description,
    }));

    return {
      success: true,
      data: datasets,
    };
  } catch (error) {
    return {
      success: false,
      error:
        "Erreur lors de la r√©cup√©ration des datasets disponibles" +
        (error instanceof Error ? error.message : "Erreur inconnue"),
    };
  }
}
